Lektor: Činčura Jiří
Poznámky ze školení:

- Funkce vykonávané na straně SQL jsou rychlejší, než když se budou vykonávat až v kódu
- Ne vše se v query zadávané jako parametr přeloží jako parametr, jsou věci, které jsou vyžadované jako konstanta, například jméno tabulky
- EF sám o sobě neukládá do cache vracené entity, ale překlady linq > query (string formát), aby se s tím vždy nezdržoval
- když to je možné, tak co nejvíce využívat projekce. tj. třeba: select (x => new { x.FirstName, x. LastName })
- pokud ve dvou dotazech v je vrácená stejná entita, ať samostatně či v kolekci, tak se jedná o stejnou instanci objektu. Pokud je tam však obyčejný "AsNoTracking" tak bacha, jsou to dvě rozdílené instance
- lazyload: donačtě data až když jsou potřeba. Výhoda: nenačte velký balík dat. Nevýhoda: mnoho dotazů do db.
- implicitní lazyloading: lektor jej považuje za celkem zlo (jako hodně velké zlo, které se špatně hlídá). Donačítá sám, ale nemám pod kontrolou kdy to jde do databáze a kdy ne a tím to může zdržovat. Je to blokující aplikace - nemá async.
- pro transparentní (explicitní) lazyloading je třeba balíček EFCore.Proxies a v DbContextu je třeba zapnout UseLazyLoadingProxies. A v entitách jsou vazbící objekty jako "virtual"
- preferuje explicitní lazyload < je to vidět na první dobrou a dobře se to kontroluje
- při dotazu se provede spočítání hashe a hledání v cache, to může být časově v některých kritických aplikacích drahé >> je možné využít EF.CompileQuery
- ChangeTracker: uchovává původní hodnoty, aktuální hodnoty a změněné objekty
- ChangeTracker: když běží app dlouho (a DbContext se neukončuje - ale mohl by), může spotřebovat velké množství prostředků, když přes DbContext proženeme velké množství objektů
- Multitentant: využívá HasQueryFilter. Tip: do konstruktoru pro DbContext předat Id tenanta a podle něj pak filtrovat jednotlivé dotazy
- Table Splitting: "rozřeže" tabulku s mnoha sloupci na různě obsáhlé entity
- Parametry do konstruktoru >> je to mžné (podrobný popis je na webu v dokumentaci pro EF Core - "Constructors")
	- EF Core preferuje konstruktor, kde je nejvíce parametrů.
	- Lze injektovat service (třeba i samotný DbContext)
	- DbContext, ILazyLoader, Action<object, sttring>, IEntityType
- Seeding:
	- .HasData() < je třeba zadávat i s Id (nesjou generované automaticky),
	- využívá se pro statická data,
	- často bývá, že statická (systémová) data mají záporný Id,
- reference nullable: EF Core s tím již tak umí pracovat. Nastavuje se buď pro celou solution a nebo jen pro soubor a má to vliv na vše v tím obsažené. Takže se to projeví například i v migracích!
- vykřičníky u Warnings - říká se jim "sakra" (možná se to píše jinak)
- Temporary tables: .IsTemporar() - lze třídit podle toho, zda je záznam "živý" / "neživý" od kdy do kdy byl "živý"
- JSON sloupce:
	- .ToJson()
	- při dotazu na jednu value obsaženoui v JSON datech to umí EF převést na query, kde se ptá přímo na value dané property přímo v query. To stejné umí i pro update (pracovat jen s vybranými proměnnými - JSON_MODIFY).
- Compiled models:
	- nepodporuje nějaké věci, jako třeba Query Filtry,...
	- musí být nainstalvaný nástroj (tool) "dotnet ef" a v projektu nainstalovaný nuget *.EfCore.Design
	- hodí se pro velké modely a velkým množstvím entit. Modely jsou předkopilované a negenerují se až při použití
	- při použití optimálí přidat kompilaci do "Build eventu"
	- před nasazením je dobré porovnat výkon před a po
- Event counter: lze pomocí něho dobře monitorovat co dělá EF. Jako kolik se spustilo query, kolik SaveChanges, kolik je aktivních DbContextů,..

* Dědičnost
	Př. objekty a dědění:
		> Vozidlo
		> Auto: Vozidlo
		> Kolo : Vozidlo
	- TPH: Table per Hierarchy (asi nejvíce využívané)
		Př:
			Id, Discriminator, Vozidlo*, Auto*, Kolo*			<< jako Discriminator doporučuje lektor využít char(2)
	- TPT: Table per Type << výhoda: nevzniká velká řídká tabulka, nevýhoda: vícero tabulek, insertování pokud je dědičnost příliš hloboká (insert do mnoha tabulek)
		Př:
			Id, Vozidlo*
			Id(FK), Auto*
			Id(FK), Kolo*
	- TPC: Table per Concrete
		Př:
			Id, Vozidlo*, Auto*
			Id, Vozidlo*, Kolo*
	
	- TPC mapování: kolize id když se vypisuje rodič (potomci se číslují na sobě nezávisle a vznickají tam kolize mezi Id). Lze vyřešit Sekvencemi, ale moc se
	nepoužívá, je to prasopes.

* Sacffolding
- vygeneruje DbContext, objekty podle DB (řekl bych, že jde o Db first)
- provádí se to přes příkazovou řádku
- je třeba nainstalovat nuget *.EFCore.Design

* Migrace
- kromě jiného je to v podstatě také verzování stavu DB
- příkazy:
	- dotnet ef migrations add <name>
	- dotnet ef migrations remove
	- dotnet ef database update <name>
	- dotnet ef migrations script << vygeneruje sql script. Dobré přidat přepínač
		> "-i" který zajistí, aby se vygeneroval script s podmiňováním, zda již není tato migrace na serveru
	- dotnet ef migrations bundle << vytvoří se exe soubor, který po supštění provede update podle migrací
- ve vytvořené migraci v migration builderu je i migrationBuilder.Sql() kde můžu v případě nějaké potřeby přímo zapsat SQL skript, který chci aby se provedl
- když chci udělat úplně čistou db mohu udělat update s parametrem 0. Vrátí DB zpět kdy nebyla aplikována ještě žádná migrace
- API (dogooglit)
- __EFMigrationsHistory: jak napovídá název. Ukládá se kdy se prováděla jaká migrace
- v případě distribuovaných služeb které přistupojí do jendé db, je třeba nějak zmenežhovat jak se služby budou chovat. Která provede migraci a která bude čekat.
- IHistoryReposiotory: mohu zde zjistit historii migrací

* Transakce
- Možnosti:
	- BeginTransaction
	- UseTransaction
	- SaveChanges / AcceptAllChanges
- Transakce jsou přímo nad DB. Nejsou nad kontextem.

* Souběžnost
- Konflikt:
	- jedna položka je změněna dvěmi či více procesy

- Přístupy:
	- pesimistický: zamykání (není v EF podporováno - neškáluje se)
	- optimistický: testování dat během ukládání (přidání sloupce s verzí a nastavení že je to .IsConcurrencyToken())
- kolize mohou nastat jen mezi update & delete
- pokud je kolize v Tokenech. Tzn. že token už není stejný, který byl když jsem si entitu vyčítal > vyhodí se EX.
- Strategie řešení konfliktů:
	- client wins
	- store wins

* Výkonost
- zásadně ovlivňuje například: indexování, atd.
- dotazování: optimalizace dotazů. Překlad z LINQu nemusí být vždy optimální.
- DB evoluce. Video: Lukas Edler - How modern SQL databases Come up with....
- Doporučení:
	- nepoužívat explicitní lazyloading,
	- omezit balík dat (projekce), které selektujeme (i vytvážení objektu v app zabírá hodně režije). Vracet pouze potřebné sloupce,
	- zaměřit se co a jak se provádí >> optimalizace procesů,
	- využívat funkce a pohledy (views) - odbavení na straně serveru je rychlejší,
	- avšak jsou situace, kdy je filtrování apod. rychlejší na straně app (větší škála možností - výpočetní, apod.)
	- ve web app může být DB kontext pouze s životností requestu,
	- když by DbContext měl být už příliš rozsýhlý => bouded context (třeba rozdělení kontextů podle entit),
	- využít případně query cache,
	- používat jeden DbContext pro více vláken není dobrý nápad. Pro každé vlákno je třeba udělat separátní instanci DbContextu (lektor oznažil jako cestu do pekel)!! > typ: Transient

* Dependenci injection
- lze v program.cs přiřadit rovnou service >> builder.Services.AddDbContext() - jsou tam i další možnosti